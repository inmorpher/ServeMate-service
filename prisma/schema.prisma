datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

generator client {
	provider = "prisma-client-js"
}
//USER


model User {
	id        Int      @id @unique @default(dbgenerated("nextval('user_id_seq')::int"))
	name String @default("")
    email String @unique
	password String
	role Role @default(USER)
	orders Order[]
	tables Table[]
	payments Payment[]
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	//authentication 
	isActive Boolean @default(true)
	lastLogin DateTime?
	refreshToken String?
	resetPasswordToken String?
	resetPasswordExpires DateTime?
}

enum Role {
    ADMIN
    USER
	HOST
	MANAGER
}

//ORDERS

model Order {
    id    Int @id @default(autoincrement())
   	table Table @relation(fields: [tableNumber], references: [tableNumber]) 
	tableNumber Int 
	orderNumber Int 
	guestsCount Int 
	payments Payment[]
	paymentStatus PaymentStatus @default(NONE)
	orderTime DateTime @default(now())
	updatedAt DateTime @updatedAt()
	foodItems OrderFoodItem[]
	drinkItems OrderDrinkItem[]
	allergies Allergies[] @default([])
	server User @relation(fields: [serverId], references: [id])
	serverId Int
	//

	totalAmount Float @default(0)
	status OrderStatus @default(RECEIVED)
	comments String?
	completionTime DateTime?
	discount Float @default(0)
	tip Float @default(0)
	shiftId String?
	
}

model OrderFoodItem {
	order Order @relation(fields: [orderId], references: [id])
    orderId Int
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId Int
    quantity Int
	guestNumber Int
	price Float @default(0)
	specialRequest String?
	allergies Allergies[] @default([])
    @@id([orderId, foodItemId, guestNumber])
}


model OrderDrinkItem {
	order Order @relation(fields: [orderId], references: [id])
	orderId Int
	drinkItem DrinkItem @relation(fields: [drinkItemId], references: [id])
	drinkItemId Int
    quantity Int
	guestNumber Int
	price Float @default(0)
    specialRequest String?
    allergies Allergies[] @default([]) 
	@@id([orderId, drinkItemId, guestNumber])
}

enum OrderStatus {
    RECEIVED
    PREPARING
    SERVED
    PAID
    CANCELLED
}

model FoodItem {
	id Int @id @default(autoincrement())
	code String @unique
    name String
    price Float
    type FoodType @default(OTHER)
	category FoodCategory @default(OTHER)
	allergies Allergies[] @default([])
    orderFoodItem OrderFoodItem[]
	ingridients String[] @default([])
	description String @default("")
	isAvailable Boolean @default(true)
	preparationTime Int @default(0)
	calories Int?
	image String?
	spicyLevel SpicyLevel @default(NOT_SPICY)
	popularityScore Float @default(0)
	isVegeterian Boolean @default(false)
	isVegan Boolean @default(false)
	isGlutenFree Boolean @default(false )
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
} 

enum SpicyLevel {
    NOT_SPICY
    MILD
    MEDIUM
    HOT
    EXTRA_HOT
}


model DrinkItem {
    id Int @id @default(autoincrement())
	code String @unique
    name String
    price Float
	category DrinkCategory @default(OTHER)
	orderDrinkItem OrderDrinkItem[]
	description String @default("")
    ingridients String[] @default([])
	isAvailable Boolean @default(true)
	volume Int
	alchoholPercentage Float?
	image String?
	isCarbonated Boolean @default(false)
	tempreture DrinkTemperature @default(ROOM)
	popularityScore Float @default(0)
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
	

	

enum PaymentStatus {
	NONE
    PAID
    REFUNDED
	CANCELLED
	PENDING
}

enum DrinkTemperature {
    COLD
    ROOM
    HOT
}

//TABLES

model Table {
	id Int @id @default(autoincrement())
    tableNumber Int @unique
    capacity Int
    order Order[]
	payments Payment[]
	status TableStatus @default(AVAILABLE)
	server User? @relation(fields: [serverId], references: [id])
	serverId Int?
}

enum TableStatus {
	AVAILABLE
	OCCUPIED
	RESERVED
	ORDERING
	SERVING
	PAYMENT
}

//PAYMENT

model Payment {
	id Int @id @default(autoincrement())
    amount Float
    paymentType PaymentType @default(CASH)
    paymentTime DateTime @default(now())
    order Order @relation(fields: [orderId], references: [id])
	table Table @relation(fields: [tableId], references: [id])
	server User @relation(fields: [serverId], references: [id])
	tableId Int
	orderId Int
	serverId Int
}

enum PaymentType {
    CASH
    CREDIT_CARD
    DEBIT_CARD
}

//FOOD ITEMS
enum Allergies {                 
	NONE
    GLUTEN
    DAIRY
    EGG
    PEANUT
    TREENUT
    FISH
    SHELLFISH
    SOY
    SESAME
    CELERY
    MUSTARD
    LUPIN
    SULPHITES
    MOLLUSCS
}





enum FoodType {
	APPETIZER
	MAIN_COURSE
	DESERT
    SIDES
	SOUSE
	OTHER
}

enum FoodCategory {
	SALAD
	MEAT
	SOUP
	FISH
	VEGGIES
	OTHER
	SEAFOOD
}


//DRINK ITEMS


enum DrinkCategory {
	BEER
    WINE
    SPIRITS
    COFFEE
    TEA
    OTHER
    SODA
    ALCOHOLIC
    NON_ALCOHOLIC
}



generator client {
  provider = "prisma-client-js"
}

generator enums {
  provider = "ts-node /Users/inmo/Documents/Projects/ServeMate-service/src/scripts/generateDto.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Models

model User {
  id             Int                 @id @unique @default(dbgenerated("(nextval('user_id_seq'::regclass))::integer"))
  name           String              @default("")
  email          String              @unique
  password       String
  role           UserRole            @default(USER)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  isActive       Boolean             @default(true)
  lastLogin      DateTime?
  orders         Order[]

  TableAssignment TableAssignment[]
  userActions    orderServerAction[]
}

model Order {
  tableNumber    Int
  guestsCount    Int
  orderTime      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  allergies      Allergy[]           @default([])
  serverId       Int
  totalAmount    Float               @default(0)
  status         OrderState          @default(RECEIVED)
  comments       String?
  completionTime DateTime?
  discount       Float               @default(0)
  tip            Float               @default(0)
  shiftId        String?
  id             Int                 @id @default(autoincrement())
  server         User                @relation(fields: [serverId], references: [id])
  table          Table               @relation(fields: [tableNumber], references: [tableNumber])
  drinkItems     OrderDrinkItem[]
  foodItems      OrderFoodItem[]
  payments       Payment[]
  serverActions  orderServerAction[]
  reservations   Reservation[]
}

model OrderFoodItem {
  id            Int         @id @unique @default(autoincrement())
  guestNumber   Int
  price         Float
  specialRequest String?
  allergies     Allergy[]   @default([])
  orderId       Int
  itemId        Int
  discount      Float       @default(0)
  finalPrice    Float
  fired         Boolean     @default(false)
  printed       Boolean     @default(false)
  paymentStatus PaymentState @default(NONE)
  refunds  RefundPayment[]
  payments Payment[]
  foodItem      FoodItem    @relation(fields: [itemId], references: [id])
  order         Order       @relation(fields: [orderId], references: [id])
}

model OrderDrinkItem {
  id            Int         @id @unique @default(autoincrement())
  guestNumber   Int
  price         Float
  specialRequest String?
  allergies     Allergy[]   @default([])
  orderId       Int
  itemId        Int
  discount      Float       @default(0)
  finalPrice    Float
  fired         Boolean     @default(false)
  printed       Boolean     @default(false)
  paymentStatus PaymentState @default(NONE)
  refunds  RefundPayment[]
  payments Payment[]
  drinkItem     DrinkItem   @relation(fields: [itemId], references: [id])
  order         Order       @relation(fields: [orderId], references: [id])
}

model FoodItem {
  id              Int             @id @unique @default(autoincrement())
  name            String
  price           Float
  type            FoodType        @default(OTHER)
  category        FoodCategory    @default(OTHER)
  allergies       Allergy[]       @default([])
  ingredients     String[]        @default([])
  description     String          @default("")
  isAvailable     Boolean         @default(true)
  preparationTime Int             @default(0)
  calories        Int?
  image           String?
  spicyLevel      SpiceLevel      @default(NOT_SPICY)
  popularityScore Float           @default(0)
  isVegetarian    Boolean         @default(false)
  isVegan         Boolean         @default(false)
  isGlutenFree    Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  OrderFoodItem   OrderFoodItem[]
}

model DrinkItem {
  id                Int             @id @default(autoincrement())
  name              String
  price             Float
  category          DrinkCategory   @default(OTHER)
  description       String          @default("")
  ingredients       String[]        @default([])
  isAvailable       Boolean         @default(true)
  volume            Int
  alcoholPercentage Float?
  image             String?
  isCarbonated      Boolean         @default(false)
  tempriture        DrinkTemp       @default(ROOM)
  popularityScore   Float           @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  OrderDrinkItem    OrderDrinkItem[]
}

model Table {
  id                 Int              @id @default(autoincrement())
  tableNumber        Int              @unique
  capacity           Int
  status             TableCondition   @default(AVAILABLE)
  additionalCapacity Int              @default(0)
  isOccupied         Boolean          @default(false)
  originalCapacity   Int
  guests             Int              @default(0)
  orders             Order[]
  assignment         TableAssignment[]
  reservations       Reservation[]
}

model orderServerAction {
  id         Int             @id @default(autoincrement())
  orderId    Int
  serverId   Int
  actionType OrderAction
  actionTime DateTime        @default(now())
  details    String?
  order      Order           @relation(fields: [orderId], references: [id])
  server     User            @relation(fields: [serverId], references: [id])
}

model Payment {
  id            Int            @id @default(autoincrement())
  amount        Float
  tax          Float @default(0)
  tip          Float @default(0)
  serviceCharge Float @default(0)
  totalAmount   Float @default(0)
  paymentType   PaymentMethod  @default(CASH)
  status       PaymentState   @default(PENDING)
  createdAt   DateTime       @default(now())
  completedAt DateTime?
  orderId       Int
  order         Order          @relation(fields: [orderId], references: [id])
  refunds       RefundPayment[]
  orderDrinkItems OrderDrinkItem[]
  orderFoodItems OrderFoodItem[]
}

model RefundPayment {
  id    Int @id @default(autoincrement())
  amount Float
  reason String
  status RefundState @default(COMPLETED)
  createdAt DateTime @default(now())
  paymentId Int
  payment Payment @relation(fields: [paymentId], references: [id])
  orderDrinkItems OrderDrinkItem[]
  orderFoodItems OrderFoodItem[]
}

model TableAssignment {
  id         Int      @id @default(autoincrement())
  tableId    Int
  serverId   Int
  isPrimary  Boolean  @default(false)
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  server     User     @relation(fields: [serverId], references: [id])
  table      Table    @relation(fields: [tableId], references: [id])

  @@unique([tableId, serverId])
}

model Reservation {
  id          Int      @id @default(autoincrement())
  guestsCount Int
  time        DateTime
  name       String
  phone      String
  email      String?
  allergies  Allergy[] @default([])
  tables     Table[]
  status     ReservationStatus @default(PENDING)
  order   Order[]
  comments   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

}

//Enums

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum UserRole {
  ADMIN
  USER
  HOST
  MANAGER
}

enum OrderState {
  AWAITING
  RECEIVED
  SERVED
  CANCELED
  DISPUTED
  READY_TO_PAY
  COMPLETED
}

enum SpiceLevel {
  NOT_SPICY
  MILD
  MEDIUM
  HOT
  EXTRA_HOT
}

enum PaymentState {
  NONE
  PAID
  REFUNDED
  CANCELLED
  PENDING
}


enum DrinkTemp {
  COLD
  ROOM
  HOT
}

enum TableCondition {
  AVAILABLE
  OCCUPIED
  RESERVED
  ORDERING
  SERVING
  PAYMENT
}

enum OrderAction {
  CREATE
  UPDATE
  ADD_ITEM
  REMOVE_ITEM
  CHANGE_STATUS
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
}

enum RefundState {
  PENDING
  COMPLETED
  CANCELLED
}

enum Allergy {
  NONE
  GLUTEN
  DAIRY
  EGG
  PEANUT
  TREENUT
  FISH
  SHELLFISH
  SOY
  SESAME
  CELERY
  MUSTARD
  LUPIN
  SULPHITES
  MOLLUSCS
}

enum FoodType {
  APPETIZER
  MAIN_COURSE
  DESSERT
  SIDES
  SAUCE
  OTHER
}

enum FoodCategory {
  SALAD
  MEAT
  SOUP
  FISH
  VEGGIES
  OTHER
  SEAFOOD
}

enum DrinkCategory {
  BEER
  WINE
  SPIRITS
  COFFEE
  TEA
  OTHER
  SODA
  ALCOHOLIC
  NON_ALCOHOLIC
}
